name: 构建Rust-Bmclapi

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    name: 构建 ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            executable: rust-bmclapi
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            executable: rust-bmclapi
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            executable: rust-bmclapi.exe

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: 安装 Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: ${{ matrix.target }}

    - name: 缓存 Rust 依赖
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.target }}

    - name: 构建
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target ${{ matrix.target }}

    - name: 重命名 Linux 产物 (Latest)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/${{ matrix.executable }} artifacts/

    - name: 重命名 Linux 产物 (OLD GLIBC)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/${{ matrix.executable }} artifacts/

    - name: 重命名 Windows 产物
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p artifacts
        copy target\${{ matrix.target }}\release\${{ matrix.executable }} artifacts\

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: rust-bmclapi-${{ matrix.os }}${{ matrix.os == 'ubuntu-20.04' && '-old' || '' }}
        path: artifacts/${{ matrix.executable }}
        retention-days: 5 